{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","containers/App.js","components/action.js","components/constants.js","registerServiceWorker.js","components/reducer.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","map","user","i","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflow","border","height","children","App","this","requestrobots","onsearchchange","filteredRobots","filter","robot","toLowerCase","includes","length","Component","connect","state","searchrobots","ispending","findrobots","error","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","initialstate","robotsstatus","rootreducer","combineReducers","action","Object","assign","logger","createLogger","store","createStore","applyMiddleware","ThunkMiddleware","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.65692377.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({ name, email, id }) => {\r\n  return (\r\n    <div className='tc grow bg-light-green br3 pa3 ma2 dib bw2 shadow-5'>\r\n      <img alt='robots' src={`https://robohash.org/${id}?size=200x200`} />\r\n      <div>\r\n        <h2>{name}</h2>\r\n        <p>{email}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Card;\r\n","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({ robots }) => {\r\n  return (\r\n    <div>\r\n      {\r\n        robots.map((user, i) => {\r\n          return (\r\n            <Card\r\n              key={i}\r\n              id={robots[i].id}\r\n              name={robots[i].name}\r\n              email={robots[i].email}\r\n              />\r\n          );\r\n        })\r\n      }\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({ searchfield, searchChange }) => {\r\n  return (\r\n    <div className='pa2'>\r\n      <input\r\n        className='pa3 ba b--green bg-lightest-blue'\r\n        type='search'\r\n        placeholder='search robots'\r\n        onChange={searchChange}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n  return (\r\n    <div style={{ overflow: 'scroll', border: '5px solid black', height: '800px'}}>\r\n      {props.children}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Scroll;","import React, { Component } from 'react';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\nimport './App.css';\r\nimport {connect} from \"react-redux\"\r\nimport { requestrobots, setsearchfield } from '../components/action';\r\n\r\n const mapstatetoprops=state=>{\r\n  return{\r\n  searchfield:state.searchrobots.searchfield,\r\n  ispending:state.findrobots.ispending,\r\n  robots:state.findrobots.robots,\r\n  error:state.findrobots.error\r\n\r\n}\r\n}\r\n const mapstatetodispatch=(dispatch)=>{\r\n  return{\r\n    onsearchchange:(event)=>{\r\n      dispatch(setsearchfield(event.target.value))\r\n    },\r\n    requestrobots:()=>dispatch(requestrobots())\r\n  }\r\n}\r\n\r\nclass App extends Component {\r\n\r\n  componentDidMount() {\r\n    this.props.requestrobots(); \r\n  }\r\n  render() {\r\n    const { robots } = this.props;\r\n    const {searchfield,onsearchchange}=this.props;\r\n    const filteredRobots = robots.filter(robot =>{\r\n      return robot.name.toLowerCase().includes(searchfield.toLowerCase());\r\n    })\r\n    return !robots.length ?\r\n      <h1>Loading</h1> :\r\n      (\r\n        <div className='tc'>\r\n          <h1 className='f1'>RoboFriends</h1>\r\n          <SearchBox searchChange={onsearchchange}/>\r\n          <Scroll>\r\n            <CardList robots={filteredRobots} />\r\n          </Scroll>\r\n        </div>\r\n      );\r\n  }\r\n}\r\n\r\nexport default connect(mapstatetoprops,mapstatetodispatch)(App);","import {SET_SEARCH_FIELD,REQUEST_ROBOTS_FAILED,REQUEST_ROBOTS_PENDING,REQUEST_ROBOTS_SUCCESS} from \"./constants\"\r\n\r\nexport const setsearchfield=(text)=>({\r\n    type:SET_SEARCH_FIELD,\r\n    payload:text\r\n})\r\n\r\nexport const requestrobots=()=>(dispatch)=>{\r\n    dispatch({type:REQUEST_ROBOTS_PENDING})\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n    .then(response=> response.json())\r\n    .then(data=>dispatch({type:REQUEST_ROBOTS_SUCCESS , payload:data}))\r\n    .catch(error=>dispatch({type:REQUEST_ROBOTS_FAILED,payload:error}))\r\n}","export const SET_SEARCH_FIELD='SET_SEARCH_FIELD';\r\nexport const REQUEST_ROBOTS_PENDING='REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS='REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED='REQUEST_ROBOTS_FAILED';","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport default function register() {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Lets check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl);\r\n      } else {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log('New content is available; please refresh.');\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import {SET_SEARCH_FIELD,REQUEST_ROBOTS_FAILED,REQUEST_ROBOTS_PENDING,REQUEST_ROBOTS_SUCCESS} from \"./constants\"\r\nconst initialstate={\r\n    searchfield:\"\"\r\n}\r\n\r\nconst robotsstatus={\r\n    robots:[],\r\n    ispending:false,\r\n    error:''\r\n\r\n}\r\n\r\nexport const searchrobots=(state=initialstate,action={})=>{\r\n    switch(action.type){\r\n        case SET_SEARCH_FIELD:\r\n            return Object.assign({},state,{searchfield:action.payload})\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const findrobots=(state=robotsstatus,action={})=>{\r\n    switch(action.type){\r\n        case REQUEST_ROBOTS_PENDING:\r\n            return Object.assign({},state,{ispending:true})\r\n        case REQUEST_ROBOTS_SUCCESS:\r\n            return Object.assign({},state,{robots:action.payload,ispending:false})\r\n        case REQUEST_ROBOTS_FAILED:\r\n            return Object.assign({},state,{error:action.payload,ispending:false})\r\n        default:\r\n            return state\r\n    }\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './containers/App';\r\nimport registerServiceWorker from './registerServiceWorker';\r\nimport 'tachyons'; \r\nimport  ThunkMiddleware from 'redux-thunk';\r\nimport { createStore,applyMiddleware,combineReducers} from \"redux\";\r\nimport { Provider } from \"react-redux\";\r\nimport { createLogger } from 'redux-logger';\r\nimport { searchrobots,findrobots } from './components/reducer';\r\nconst rootreducer=combineReducers({searchrobots,findrobots});\r\nconst logger=createLogger()\r\nconst store= createStore (rootreducer,applyMiddleware(logger,ThunkMiddleware))\r\n\r\nReactDOM.render(\r\n<Provider store={store}><App /></Provider>\r\n, \r\ndocument.getElementById('root'));\r\nregisterServiceWorker();\r\n"],"sourceRoot":""}